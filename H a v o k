<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Last War Server 1641 Events</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
        }
        .calendar-grid {
            display: grid;
            grid-template-columns: repeat(7, 1fr);
            gap: 1px;
            background-color: #4B5563;
        }
        .calendar-day {
            background-color: #1F2937;
            padding: 8px;
            min-height: 120px;
            position: relative;
        }
        .calendar-day.inactive {
            background-color: #374151;
            color: #6B7280;
        }
        .event {
            font-size: 0.75rem;
            padding: 4px;
            margin-top: 4px;
            border-radius: 4px;
            cursor: pointer;
            overflow: hidden;
            white-space: nowrap;
            text-overflow: ellipsis;
        }
        .event:hover {
            opacity: 0.8;
        }
        .dot {
            width: 8px;
            height: 8px;
            border-radius: 50%;
            position: absolute;
            top: 8px;
        }
        .radar-pass-dot { right: 8px; }
        .glittering-market-dot { right: 20px; }
        .moonstone-dot { right: 32px; }
        .energy-dot { right: 44px; }
        .custom-weekly-dot { right: 56px; }
        .hero-growth-dot { right: 68px; }
        .summon-supplies-dot { right: 80px; }
        .total-mobilization-dot { right: 92px; }
        .bullseye-loot-dot { right: 104px; }
        .ammo-bonanza-dot { right: 116px; }
        .drone-training-pass-dot { right: 128px; }
        .special-training-pass-dot { right: 140px; }
    </style>
</head>
<body class="bg-gray-900 text-gray-200 p-4">

    <div class="max-w-4xl mx-auto bg-gray-800 rounded-xl shadow-2xl p-6">
        <h1 class="text-4xl font-bold text-center mb-2 text-red-500">Last War Events</h1>
        <h2 class="text-xl text-center mb-8 text-gray-400">Server #1641 Schedule</h2>
        
        <div class="flex justify-between items-center mb-4">
            <button id="prev-month" class="px-4 py-2 rounded-lg bg-red-600 text-white font-bold hover:bg-red-700 transition duration-300">Previous</button>
            <h3 id="current-month" class="text-2xl font-bold"></h3>
            <button id="next-month" class="px-4 py-2 rounded-lg bg-red-600 text-white font-bold hover:bg-red-700 transition duration-300">Next</button>
        </div>

        <div class="calendar-grid rounded-lg overflow-hidden">
            <div class="text-center font-bold py-2 text-gray-400">Mon</div>
            <div class="text-center font-bold py-2 text-gray-400">Tue</div>
            <div class="text-center font-bold py-2 text-gray-400">Wed</div>
            <div class="text-center font-bold py-2 text-gray-400">Thu</div>
            <div class="text-center font-bold py-2 text-gray-400">Fri</div>
            <div class="text-center font-bold py-2 text-gray-400">Sat</div>
            <div class="text-center font-bold py-2 text-gray-400">Sun</div>
            <div id="calendar-body" class="col-span-7 calendar-grid"></div>
        </div>
    </div>
    
    <div id="event-modal" class="fixed inset-0 bg-gray-900 bg-opacity-75 flex items-center justify-center p-4 hidden">
        <div class="bg-gray-800 rounded-lg p-6 w-full max-w-sm">
            <h4 id="modal-title" class="text-xl font-bold mb-4 text-red-500">Add Event</h4>
            <input type="text" id="event-name" placeholder="Event Name" class="w-full p-2 mb-4 bg-gray-700 rounded-md border border-gray-600 focus:outline-none focus:border-red-500">
            <input type="color" id="event-color" class="w-full h-10 mb-4 bg-gray-700 rounded-md">
            <div class="flex justify-end space-x-2">
                <button id="cancel-btn" class="px-4 py-2 rounded-lg bg-gray-600 text-white hover:bg-gray-700 transition duration-300">Cancel</button>
                <button id="save-btn" class="px-4 py-2 rounded-lg bg-red-600 text-white hover:bg-red-700 transition duration-300">Save</button>
            </div>
        </div>
    </div>

    <script type="module">
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
        import { getAuth, signInWithCustomToken, signInAnonymously } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
        import { getFirestore, collection, addDoc, getDocs, onSnapshot, query, deleteDoc, doc, setDoc } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";

        let db, auth;
        let userId;

        const firebaseConfig = JSON.parse(__firebase_config);
        const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';

        const app = initializeApp(firebaseConfig);
        db = getFirestore(app);
        auth = getAuth(app);

        const initFirebase = async () => {
            try {
                if (typeof __initial_auth_token !== 'undefined') {
                    await signInWithCustomToken(auth, __initial_auth_token);
                } else {
                    await signInAnonymously(auth);
                }
                userId = auth.currentUser?.uid || crypto.randomUUID();
                setupCalendarListeners();
            } catch (error) {
                console.error("Firebase Auth Error: ", error);
            }
        };

        const calendarBody = document.getElementById('calendar-body');
        const currentMonthEl = document.getElementById('current-month');
        const prevMonthBtn = document.getElementById('prev-month');
        const nextMonthBtn = document.getElementById('next-month');
        const eventModal = document.getElementById('event-modal');
        const saveBtn = document.getElementById('save-btn');
        const cancelBtn = document.getElementById('cancel-btn');
        const eventNameInput = document.getElementById('event-name');
        const eventColorInput = document.getElementById('event-color');

        let dateEvents = {};
        let currentDate = new Date();

        const getEventsCollectionRef = () => {
            return collection(db, `artifacts/${appId}/users/${userId}/events`);
        };

        const renderCalendar = (date) => {
            calendarBody.innerHTML = '';
            const year = date.getFullYear();
            const month = date.getMonth();
            currentMonthEl.textContent = date.toLocaleString('default', { month: 'long', year: 'numeric' });

            const firstDayOfMonth = (new Date(year, month, 1).getDay() + 6) % 7;
            const daysInMonth = new Date(year, month + 1, 0).getDate();

            for (let i = 0; i < firstDayOfMonth; i++) {
                const dayEl = document.createElement('div');
                dayEl.classList.add('calendar-day', 'inactive');
                calendarBody.appendChild(dayEl);
            }

            for (let day = 1; day <= daysInMonth; day++) {
                const dayEl = document.createElement('div');
                dayEl.classList.add('calendar-day', 'rounded-lg');
                dayEl.innerHTML = `<span class="font-bold text-lg">${day}</span>`;
                dayEl.dataset.date = `${year}-${month + 1}-${day}`;
                
                const key = dayEl.dataset.date;
                if (dateEvents[key]) {
                    dateEvents[key].forEach(event => {
                        const eventName = event.name;
                        if (!eventName.endsWith("Dot")) {
                            const eventEl = document.createElement('div');
                            eventEl.classList.add('event', 'truncate');
                            eventEl.style.backgroundColor = event.color;
                            if(event.textColor) {
                                eventEl.style.color = event.textColor;
                            }
                            if(event.borderColor) {
                                eventEl.style.border = `2px solid ${event.borderColor}`;
                            }
                            eventEl.textContent = event.name;
                            eventEl.dataset.id = event.id;
                            dayEl.appendChild(eventEl);
                        }
                    });
                }
                
                const dots = [
                    { name: "Radar Pass Dot", className: "radar-pass-dot", color: "#60A5FA" },
                    { name: "Glittering Market Dot", className: "glittering-market-dot", color: "#FB7185" },
                    { name: "Moonstone Blessing Dot", className: "moonstone-dot", color: "#A78BFA" },
                    { name: "Energy Loot Quest Dot", className: "energy-dot", color: "#06B6D4" },
                    { name: "Custom Weekly Pass Dot", className: "custom-weekly-dot", color: "#EF4444" },
                    { name: "Hero Growth Battle Pass Dot", className: "hero-growth-dot", color: "#3B82F6" },
                    { name: "Summon Supplies Dot", className: "summon-supplies-dot", color: "#FACC15" },
                    { name: "Total Mobilization Dot", className: "total-mobilization-dot", color: "#800080" },
                    { name: "Bullseye Loot Dot", className: "bullseye-loot-dot", color: "#166534" },
                    { name: "Ammo Bonanza Dot", className: "ammo-bonanza-dot", color: "#EC4899" },
                    { name: "Drone Training Pass Dot", className: "drone-training-pass-dot", color: "#000000" },
                    { name: "Special Training Pass Dot", className: "special-training-pass-dot", color: "#10B981" }
                ];
                
                dots.forEach(dot => {
                    const event = dateEvents[key]?.find(e => e.name === dot.name || e.name === dot.name.replace(' Dot', ''));
                    if (event) {
                        const dotEl = document.createElement('div');
                        dotEl.classList.add('dot', dot.className);
                        dotEl.style.backgroundColor = event.color;
                        dayEl.appendChild(dotEl);
                    }
                });

                dayEl.addEventListener('click', (e) => {
                    if (e.target.classList.contains('event')) {
                        console.log('Event clicked:', e.target.textContent);
                        // Using a custom modal instead of alert/confirm
                        // You can implement your own logic here
                    } else {
                        eventModal.style.display = 'flex';
                        saveBtn.dataset.date = dayEl.dataset.date;
                        eventNameInput.value = '';
                        eventColorInput.value = '#FF5733';
                    }
                });
                calendarBody.appendChild(dayEl);
            }
        };

        const saveEvent = async (date) => {
            const name = eventNameInput.value.trim();
            const color = eventColorInput.value;
            if (!name) return;

            try {
                await addDoc(getEventsCollectionRef(), {
                    date: date,
                    name: name,
                    color: color,
                    timestamp: new Date()
                });
                eventModal.style.display = 'none';
            } catch (e) {
                console.error("Error adding document: ", e);
            }
        };

        const deleteEvent = async (id) => {
            try {
                await deleteDoc(doc(getEventsCollectionRef(), id));
            } catch (e) {
                console.error("Error deleting document: ", e);
            }
        };
        
        const preloadEvents = async () => {
            const preloadedEvents = [];
            const today = new Date('2025-09-08'); 
            
            const eventData = {
                'hot-deals': [
                    [{ name: "Summon Supplies", color: "#FACC15" }, { name: "Moonstone Blessing", color: "#A78BFA" }],
                    [{ name: "Custom Weekly Pass", color: "#EF4444" }, { name: "Moonstone Blessing", color: "#A78BFA" }],
                    [{ name: "Hero Growth Battle Pass", color: "#3B82F6" }, { name: "Glittering Market", color: "#FB7185" }, { name: "Decorate Your Dreams", color: "#F97316" }, { name: "Energy Loot Quest", color: "#06B6D4" }],
                    [{ name: "Custom Weekly Pass", color: "#EF4444" }, { name: "Summon Supplies", color: "#FACC15" }],
                    [{ name: "Drone Training Pass", color: "#000000", textColor: "#FFFFFF" }, { name: "Decorate Your Dreams", color: "#F97316" }, { name: "Bullseye Loot", color: "#166534" }, { name: "Ammo Bonanza", color: "#EC4899" }, { name: "Moonstone Blessing", color: "#A78BFA" }],
                    [{ name: "Special Training Pass", color: "#10B981" }, { name: "Total Mobilization", color: "#800080" }, { name: "Custom Weekly Pass", color: "#EF4444" }, { name: "Energy Loot Quest", color: "#06B6D4" }],
                    [{ name: "Hero Growth Battle Pass", color: "#3B82F6" }, { name: "Decorate Your Dreams", color: "#F97316" }, { name: "Summon Supplies", color: "#FACC15" }],
                    [{ name: "Custom Weekly Pass", color: "#EF4444" }, { name: "Glittering Market", color: "#FB7185" }],
                    [{ name: "Drone Training Pass", color: "#000000", textColor: "#FFFFFF" }, { name: "Decorate Your Dreams", color: "#F97316" }, { name: "Bullseye Loot", color: "#166534" }, { name: "Ammo Bonanza", color: "#EC4899" }, { name: "Moonstone Blessing", color: "#A78BFA" }]
                ],
                'daily-and-weekly': [
                    { day: 1, name: "Wanted Boss: 87 🛡️", color: "#374151" }, // Monday
                    { day: 1, name: "Mason/Violet/Monica", color: "#374151" }, // Monday
                    { day: 2, name: "Wanted Boss: 64 🚀", color: "#374151" }, // Tuesday
                    { day: 2, name: "Mason/Violet/Monica", color: "#374151" }, // Tuesday
                    { day: 3, name: "Wanted Boss: 39 🚁", color: "#374151" }, // Wednesday
                    { day: 4, name: "Wanted Boss: 87 🛡️", color: "#374151" }, // Thursday
                    { day: 4, name: "Ghost Ops", color: "#374151" }, // Thursday
                    { day: 5, name: "Wanted Boss: 64 🚀", color: "#374151" }, // Friday
                    { day: 5, name: "Desert Storm Battlefield", color: "#374151" }, // Friday
                    { day: 6, name: "Wanted Boss: 39 🚁", color: "#374151" }, // Saturday
                    { day: 6, name: "Winter Storm Battlefield", color: "#374151" }, // Saturday
                    { day: 0, name: "Frontline Breakthrough", color: "#374151" } // Sunday
                ],
                'ab-rotation': [
                    // Week A
                    { day: 3, name: "General's Trial", color: "#34D399", borderColor: "#C0C0C0" },
                    { day: 4, name: "General's Trial", color: "#34D399", borderColor: "#C0C0C0" },
                    { day: 5, name: "General's Trial", color: "#34D399", borderColor: "#C0C0C0" },
                    { day: 0, name: "Doomsday", color: "#FACC15" },
                    // Week B
                    { day: 3, name: "Zombie Invasion", color: "#22C55E", borderColor: "#FFD700" },
                    { day: 4, name: "Zombie Invasion", color: "#22C55E", borderColor: "#FFD700" },
                    { day: 5, name: "Zombie Invasion", color: "#22C55E", borderColor: "#FFD700" },
                    { day: 0, name: "Rampage Bosses", color: "#4F46E5" }
                ]
            };
            
            const weeksToGenerate = 52;
            for (let i = 0; i < weeksToGenerate; i++) {
                const hotDealsWeek = i % eventData['hot-deals'].length;
                const events = eventData['hot-deals'][hotDealsWeek];
                const startDate = new Date(today);
                startDate.setDate(today.getDate() + (i * 7));
                
                // Events that last for 7 days
                const sevenDayEvents = ["Moonstone Blessing", "Energy Loot Quest", "Custom Weekly Pass", "Hero Growth Battle Pass", "Radar Pass", "Drone Training Pass", "Special Training Pass"];

                // Logic for 7-day events
                sevenDayEvents.forEach(sevenDayEventName => {
                    const event = events.find(e => e.name === sevenDayEventName);
                    if (event) {
                        const eventStartDate = new Date(startDate);
                        preloadedEvents.push({
                            date: `${eventStartDate.getFullYear()}-${eventStartDate.getMonth() + 1}-${eventStartDate.getDate()}`,
                            name: event.name,
                            color: event.color,
                            textColor: event.textColor || null
                        });
                        for (let j = 1; j < 7; j++) {
                            const dotDay = new Date(eventStartDate);
                            dotDay.setDate(eventStartDate.getDate() + j);
                            preloadedEvents.push({
                                date: `${dotDay.getFullYear()}-${dotDay.getMonth() + 1}-${dotDay.getDate()}`,
                                name: `${event.name} Dot`,
                                color: event.color
                            });
                        }
                    }
                });

                // Events that last for 6 days
                const sixDayEvents = ["Summon Supplies", "Total Mobilization", "Glittering Market"];
                sixDayEvents.forEach(sixDayEventName => {
                    const event = events.find(e => e.name === sixDayEventName);
                    if (event) {
                        const eventStartDate = new Date(startDate);
                        preloadedEvents.push({
                            date: `${eventStartDate.getFullYear()}-${eventStartDate.getMonth() + 1}-${eventStartDate.getDate()}`,
                            name: event.name,
                            color: event.color
                        });
                        for (let j = 1; j < 6; j++) {
                            const dotDay = new Date(eventStartDate);
                            dotDay.setDate(eventStartDate.getDate() + j);
                            preloadedEvents.push({
                                date: `${dotDay.getFullYear()}-${dotDay.getMonth() + 1}-${dotDay.getDate()}`,
                                name: `${event.name} Dot`,
                                color: event.color
                            });
                        }
                    }
                });
                
                // Events that last for 5 days
                const fiveDayEvents = ["Bullseye Loot", "Ammo Bonanza"];
                fiveDayEvents.forEach(fiveDayEventName => {
                    const event = events.find(e => e.name === fiveDayEventName);
                    if (event) {
                        const eventStartDate = new Date(startDate);
                        preloadedEvents.push({
                            date: `${eventStartDate.getFullYear()}-${eventStartDate.getMonth() + 1}-${eventStartDate.getDate()}`,
                            name: event.name,
                            color: event.color
                        });
                        for (let j = 1; j < 5; j++) {
                            const dotDay = new Date(eventStartDate);
                            dotDay.setDate(eventStartDate.getDate() + j);
                            preloadedEvents.push({
                                date: `${dotDay.getFullYear()}-${dotDay.getMonth() + 1}-${dotDay.getDate()}`,
                                name: `${event.name} Dot`,
                                color: event.color
                            });
                        }
                    }
                });

                // Add all other events
                const eventsWithDots = [...sevenDayEvents, ...sixDayEvents, ...fiveDayEvents];
                events.filter(event => !eventsWithDots.includes(event.name)).forEach(event => {
                    preloadedEvents.push({
                        date: `${startDate.getFullYear()}-${startDate.getMonth() + 1}-${startDate.getDate()}`,
                        name: event.name,
                        color: event.color
                    });
                });
            }

            for (let i = 0; i < weeksToGenerate * 7; i++) {
                const dayDate = new Date(today);
                dayDate.setDate(today.getDate() + i);
                const dayOfWeek = dayDate.getDay();
                
                eventData['daily-and-weekly'].forEach(event => {
                    if (event.day === dayOfWeek) {
                        preloadedEvents.push({
                            date: `${dayDate.getFullYear()}-${dayDate.getMonth() + 1}-${dayDate.getDate()}`,
                            name: event.name,
                            color: event.color
                        });
                    }
                });
            }

            for (let i = 0; i < weeksToGenerate; i++) {
                const isWeekA = i % 2 === 1;
                const rotationEvents = isWeekA ? eventData['ab-rotation'].slice(0, 4) : eventData['ab-rotation'].slice(4);
                const startDate = new Date(today);
                startDate.setDate(today.getDate() + (i * 7));

                rotationEvents.forEach(event => {
                    const eventDate = new Date(startDate);
                    eventDate.setDate(startDate.getDate() + (event.day - startDate.getDay() + 7) % 7);
                    preloadedEvents.push({
                        date: `${eventDate.getFullYear()}-${eventDate.getMonth() + 1}-${eventDate.getDate()}`,
                        name: event.name,
                        color: event.color,
                        borderColor: event.borderColor || null
                    });
                });
            }

            const seasonalEvents = [
                { date: `2025-10-31`, name: "Halloween Event", color: "#FF5733" },
                { date: `2025-11-28`, name: "Thanksgiving Festival", color: "#FF5733" },
                { date: `2025-12-25`, name: "Christmas Festival", color: "#FF5733" },
                { date: `2025-12-26`, name: "Winter Storm Battlefield", color: "#3357FF" }
            ];
            preloadedEvents.push(...seasonalEvents);

            const lionCubDate = new Date(today);
            lionCubDate.setDate(today.getDate() + 11);
            preloadedEvents.push({
                date: `${lionCubDate.getFullYear()}-${lionCubDate.getMonth() + 1}-${lionCubDate.getDate()}`,
                name: "Lion Cub Hero Unlocks 🚀",
                color: "#FFD700",
                textColor: "#800080",
                borderColor: "#800080"
            });


            const eventsRef = getEventsCollectionRef();
            const snapshot = await getDocs(eventsRef);
            if (snapshot.empty) {
                preloadedEvents.forEach(async (event) => {
                    await addDoc(eventsRef, event);
                });
            }
        };

        const setupCalendarListeners = () => {
            prevMonthBtn.addEventListener('click', () => {
                currentDate.setMonth(currentDate.getMonth() - 1);
                renderCalendar(currentDate);
            });

            nextMonthBtn.addEventListener('click', () => {
                currentDate.setMonth(currentDate.getMonth() + 1);
                renderCalendar(currentDate);
            });

            saveBtn.addEventListener('click', () => {
                saveEvent(saveBtn.dataset.date);
            });

            cancelBtn.addEventListener('click', () => {
                eventModal.style.display = 'none';
            });

            const q = query(getEventsCollectionRef());
            onSnapshot(q, (snapshot) => {
                dateEvents = {};
                snapshot.forEach(doc => {
                    const event = { id: doc.id, ...doc.data() };
                    if (!dateEvents[event.date]) {
                        dateEvents[event.date] = [];
                    }
                    dateEvents[event.date].push(event);
                });
                renderCalendar(currentDate);
            }, (error) => {
                console.error("Firestore real-time error: ", error);
            });
            
            preloadEvents();
        };

        initFirebase();
    </script>

</body>
</html>
